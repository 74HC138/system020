F00:0001       .include "system.asm"
F01:0001       ;-----------------------------------------------------------------------------
F01:0002       ;Base definitions
F01:0003       ROM_BASE        = $00000000
F01:0004       ROM_SIZE        = $00040000
F01:0005       ROM_TOP         =  ROM_BASE + ROM_SIZE
F01:0006       
F01:0007       RAM_BASE        = $10000000
F01:0008       RAM_SIZE        = $00100000
F01:0009       RAM_TOP         = RAM_BASE + RAM_SIZE
F01:0010       RAM_PAGES       = RAM_SIZE / 1024
F01:0011       
F01:0012       MFP_BASE        = $40000000
F01:0013       
F01:0014       IDE0_BASE	= $20000000
F01:0015       IDE1_BASE	= $30000000
F01:0016       
F01:0017       STACK_INIT	= RAM_TOP
F01:0018       ;-----------------------------------------------------------------------------
F01:0019       ;MFP registers
F01:0020       MFP_GPDR        = MFP_BASE + $00
F01:0021       MFP_AER         = MFP_BASE + $01
F01:0022       MFP_DDR         = MFP_BASE + $02
F01:0023       MFP_IERA        = MFP_BASE + $03
F01:0024       MFP_IERB        = MFP_BASE + $04
F01:0025       MFP_IPRA        = MFP_BASE + $05
F01:0026       MFP_IPRB        = MFP_BASE + $06
F01:0027       MFP_ISRA        = MFP_BASE + $07
F01:0028       MFP_ISRB        = MFP_BASE + $08
F01:0029       MFP_IMRA        = MFP_BASE + $09
F01:0030       MFP_IMRB        = MFP_BASE + $0A
F01:0031       MFP_VR          = MFP_BASE + $0B
F01:0032       MFP_TACR        = MFP_BASE + $0C
F01:0033       MFP_TBCR        = MFP_BASE + $0D
F01:0034       MFP_TCDCR       = MFP_BASE + $0E
F01:0035       MFP_TADR        = MFP_BASE + $0F
F01:0036       MFP_TBDR        = MFP_BASE + $10
F01:0037       MFP_TCDR        = MFP_BASE + $11
F01:0038       MFP_TDDR        = MFP_BASE + $12
F01:0039       MFP_SCR         = MFP_BASE + $13
F01:0040       MFP_UCR         = MFP_BASE + $14
F01:0041       MFP_RSR         = MFP_BASE + $15
F01:0042       MFP_TSR         = MFP_BASE + $16
F01:0043       MFP_UDR         = MFP_BASE + $17
F01:0044       ;-----------------------------------------------------------------------------
F01:0045       ;IDE registers
F01:0046       IDE_D		= IDE0_BASE + $00
F01:0047       IDE_E		= IDE0_BASE + $02 ;read only
F01:0048       IDE_SC		= IDE0_BASE + $04
F01:0049       IDE_SN		= IDE0_BASE + $06
F01:0050       IDE_CL		= IDE0_BASE + $08
F01:0051       IDE_CH		= IDE0_BASE + $0A
F01:0052       IDE_SDH		= IDE0_BASE + $0C
F01:0053       IDE_STAT	= IDE0_BASE + $0E ;read only
F01:0054       IDE_WP		= IDE0_BASE + $02 ;write only
F01:0055       IDE_CMD		= IDE0_BASE + $0E ;write only
F01:0056       
F01:0057       IDE_ASTAT	= IDE1_BASE + $0C ;read only
F01:0058       IDE_DIGO	= IDE1_BASE + $0C ;write only
F01:0059       IDE_DRVA	= IDE1_BASE + $0E ;read only
F01:0060       
F01:0061       IDE_LBAL	= IDE0_BASE + $06
F01:0062       IDE_LBAM	= IDE0_BASE + $08
F01:0063       IDE_LBAH	= IDE0_BASE + $0A
F01:0064       
F00:0002       
F00:0003       org ROM_BASE
F00:0004       
F00:0005       .include "vector.asm"
F02:0001       ;-----------------------------------------------------------------------------
F02:0002       ;exception vector table
F02:0003       dc.l STACK_INIT                 ;Reset Initial Interrupt Stack Pointer
               S01:00000000:  10 10 00 00
F02:0004       dc.l Main                       ;Reset Initial Program Counter
               S01:00000004:  00 00 06 2A
F02:0005       dc.l FatalError                 ;Bus error
               S01:00000008:  00 00 04 00
F02:0006       dc.l FatalError                 ;Address error
               S01:0000000C:  00 00 04 00
F02:0007       
F02:0008       dc.l FatalError                 ;Illigal Instruction
               S01:00000010:  00 00 04 00
F02:0009       dc.l FatalError                 ;Zero Divide
               S01:00000014:  00 00 04 00
F02:0010       dc.l FatalError                 ;CHK, CHK2 Instruction
               S01:00000018:  00 00 04 00
F02:0011       dc.l FatalError                 ;cpTRAPcc, TRAPcc, TRAPV Instructions
               S01:0000001C:  00 00 04 00
F02:0012       
F02:0013       dc.l FatalError                 ;Privilege Violation
               S01:00000020:  00 00 04 00
F02:0014       dc.l IgnoreInterrupt            ;Trace
               S01:00000024:  00 00 04 4E
F02:0015       dc.l IgnoreInterrupt            ;Line 1010 Emulator
               S01:00000028:  00 00 04 4E
F02:0016       dc.l IgnoreInterrupt            ;Line 1111 Emulator
               S01:0000002C:  00 00 04 4E
F02:0017       
F02:0018       dc.l IgnoreInterrupt            ;(Reserved)
               S01:00000030:  00 00 04 4E
F02:0019       dc.l FatalError                 ;Coprocessor Protocol Violation
               S01:00000034:  00 00 04 00
F02:0020       dc.l FatalError                 ;Format error
               S01:00000038:  00 00 04 00
F02:0021       dc.l FatalError                 ;Uninitialized Interrupt
               S01:0000003C:  00 00 04 00
F02:0022       
F02:0023       dc.l IgnoreInterrupt            ;(Unasigned)
               S01:00000040:  00 00 04 4E
F02:0024       dc.l IgnoreInterrupt            ;(Unasigned)
               S01:00000044:  00 00 04 4E
F02:0025       dc.l IgnoreInterrupt            ;(Unasigned)
               S01:00000048:  00 00 04 4E
F02:0026       dc.l IgnoreInterrupt            ;(Unasigned)
               S01:0000004C:  00 00 04 4E
F02:0027       dc.l IgnoreInterrupt            ;(Unasigned)
               S01:00000050:  00 00 04 4E
F02:0028       dc.l IgnoreInterrupt            ;(Unasigned)
               S01:00000054:  00 00 04 4E
F02:0029       dc.l IgnoreInterrupt            ;(Unasigned)
               S01:00000058:  00 00 04 4E
F02:0030       dc.l IgnoreInterrupt            ;(Unasigned)
               S01:0000005C:  00 00 04 4E
F02:0031       
F02:0032       dc.l IgnoreInterrupt            ;Spurious Interrupt
               S01:00000060:  00 00 04 4E
F02:0033       dc.l IgnoreInterrupt            ;Level 1 Interrupt Autovector
               S01:00000064:  00 00 04 4E
F02:0034       dc.l IgnoreInterrupt            ;Level 2 Interrupt Autovector
               S01:00000068:  00 00 04 4E
F02:0035       dc.l IgnoreInterrupt            ;Level 3 Interrupt Autovector
               S01:0000006C:  00 00 04 4E
F02:0036       
F02:0037       dc.l IgnoreInterrupt            ;Level 4 Interrupt Autovector
               S01:00000070:  00 00 04 4E
F02:0038       dc.l IgnoreInterrupt            ;Level 5 Interrupt Autovector
               S01:00000074:  00 00 04 4E
F02:0039       dc.l IgnoreInterrupt            ;Level 6 Interrupt Autovector
               S01:00000078:  00 00 04 4E
F02:0040       dc.l IgnoreInterrupt            ;Level 7 Interrupt Autovector
               S01:0000007C:  00 00 04 4E
F02:0041       
F02:0042       dc.l IgnoreInterrupt            ;TRAP #0
               S01:00000080:  00 00 04 4E
F02:0043       dc.l IgnoreInterrupt            ;TRAP #1
               S01:00000084:  00 00 04 4E
F02:0044       dc.l IgnoreInterrupt            ;TRAP #2
               S01:00000088:  00 00 04 4E
F02:0045       dc.l IgnoreInterrupt            ;TRAP #3
               S01:0000008C:  00 00 04 4E
F02:0046       dc.l IgnoreInterrupt            ;TRAP #4
               S01:00000090:  00 00 04 4E
F02:0047       dc.l IgnoreInterrupt            ;TRAP #5
               S01:00000094:  00 00 04 4E
F02:0048       dc.l IgnoreInterrupt            ;TRAP #6
               S01:00000098:  00 00 04 4E
F02:0049       dc.l IgnoreInterrupt            ;TRAP #7
               S01:0000009C:  00 00 04 4E
F02:0050       dc.l IgnoreInterrupt            ;TRAP #8
               S01:000000A0:  00 00 04 4E
F02:0051       dc.l IgnoreInterrupt            ;TRAP #9
               S01:000000A4:  00 00 04 4E
F02:0052       dc.l IgnoreInterrupt            ;TRAP #10
               S01:000000A8:  00 00 04 4E
F02:0053       dc.l IgnoreInterrupt            ;TRAP #11
               S01:000000AC:  00 00 04 4E
F02:0054       dc.l IgnoreInterrupt            ;TRAP #12
               S01:000000B0:  00 00 04 4E
F02:0055       dc.l IgnoreInterrupt            ;TRAP #13
               S01:000000B4:  00 00 04 4E
F02:0056       dc.l IgnoreInterrupt            ;TRAP #14
               S01:000000B8:  00 00 04 4E
F02:0057       dc.l IgnoreInterrupt            ;TRAP #15
               S01:000000BC:  00 00 04 4E
F02:0058       
F02:0059       dc.l IgnoreInterrupt            ;FPCP Branch or Set on Unordered Condition
               S01:000000C0:  00 00 04 4E
F02:0060       dc.l IgnoreInterrupt            ;FPCP Inexact Result
               S01:000000C4:  00 00 04 4E
F02:0061       dc.l IgnoreInterrupt            ;FPCP Divide by Zero
               S01:000000C8:  00 00 04 4E
F02:0062       dc.l IgnoreInterrupt            ;FPCP Underflow
               S01:000000CC:  00 00 04 4E
F02:0063       
F02:0064       dc.l IgnoreInterrupt            ;FPCP Operand error
               S01:000000D0:  00 00 04 4E
F02:0065       dc.l IgnoreInterrupt            ;FPCP Overflow
               S01:000000D4:  00 00 04 4E
F02:0066       dc.l IgnoreInterrupt            ;FPCP Signaling NAN
               S01:000000D8:  00 00 04 4E
F02:0067       dc.l IgnoreInterrupt            ;(Unasigned)
               S01:000000DC:  00 00 04 4E
F02:0068       
F02:0069       dc.l IgnoreInterrupt            ;PMMU Configuration
               S01:000000E0:  00 00 04 4E
F02:0070       dc.l IgnoreInterrupt            ;PMMU Illigal Operation
               S01:000000E4:  00 00 04 4E
F02:0071       dc.l IgnoreInterrupt            ;PMMU Access Level Violation
               S01:000000E8:  00 00 04 4E
F02:0072       
F02:0073       dc.l IgnoreInterrupt            ;(Unasigned)
               S01:000000EC:  00 00 04 4E
F02:0074       dc.l IgnoreInterrupt            ;(Unasigned)
               S01:000000F0:  00 00 04 4E
F02:0075       dc.l IgnoreInterrupt            ;(Unasigned)
               S01:000000F4:  00 00 04 4E
F02:0076       dc.l IgnoreInterrupt            ;(Unasigned)
               S01:000000F8:  00 00 04 4E
F02:0077       dc.l IgnoreInterrupt            ;(Unasigned)
               S01:000000FC:  00 00 04 4E
F02:0078       
F02:0079       dc.l IgnoreInterrupt            ;MFP General Purpose Interrupt 0
               S01:00000100:  00 00 04 4E
F02:0080       dc.l IgnoreInterrupt            ;MFP General Purpose Interrupt 1
               S01:00000104:  00 00 04 4E
F02:0081       dc.l IgnoreInterrupt            ;MFP General Purpose Interrupt 2
               S01:00000108:  00 00 04 4E
F02:0082       dc.l IgnoreInterrupt            ;MFP General Purpose Interrupt 3
               S01:0000010C:  00 00 04 4E
F02:0083       dc.l IgnoreInterrupt            ;MFP Timer D
               S01:00000110:  00 00 04 4E
F02:0084       dc.l IgnoreInterrupt            ;MFP Timer C
               S01:00000114:  00 00 04 4E
F02:0085       dc.l IgnoreInterrupt            ;MFP General Purpose Interrupt 4
               S01:00000118:  00 00 04 4E
F02:0086       dc.l IgnoreInterrupt            ;MFP General Purpose Interrupt 5
               S01:0000011C:  00 00 04 4E
F02:0087       dc.l IgnoreInterrupt            ;MFP Timer B
               S01:00000120:  00 00 04 4E
F02:0088       dc.l IgnoreInterrupt            ;MFP Transmit Error
               S01:00000124:  00 00 04 4E
F02:0089       dc.l IgnoreInterrupt            ;MFP Transmit Buffer Empty
               S01:00000128:  00 00 04 4E
F02:0090       dc.l IgnoreInterrupt            ;MFP Receive Error
               S01:0000012C:  00 00 04 4E
F02:0091       dc.l SerialRXHandler            ;MFP Receive Buffer Full
               S01:00000130:  00 00 05 C2
F02:0092       dc.l IgnoreInterrupt            ;MFP Timer A
               S01:00000134:  00 00 04 4E
F02:0093       dc.l IgnoreInterrupt            ;MFP General Purpose Interrupt 6
               S01:00000138:  00 00 04 4E
F02:0094       dc.l IgnoreInterrupt            ;MFP General Purpose Interrupt 7
               S01:0000013C:  00 00 04 4E
F02:0095       
F02:0096       dcb.l 176, IgnoreInterrupt      ;User defined Interrupts
F02:0097       ;-----------------------------------------------------------------------------
F02:0098       ;Basic exception handling function
F02:0099       FatalError:			;locks up cpu completely until reset
F02:0100       		move.l #.text, A0
               S01:00000400:  30 7C 04 22
F02:0101       	.mfpWait:
F02:0102       		btst.b #7, MFP_TSR
               S01:00000404:  08 39 00 07 40 00 00 16
F02:0103       		beq.w .mfpWait
               S01:0000040C:  67 00 FF F6
F02:0104       
F02:0105       		cmpi.b #$00, (A0)
               S01:00000410:  4A 10
F02:0106       		beq .stop
               S01:00000412:  67 0A
F02:0107       
F02:0108       		move.b (A0)+, MFP_UDR
               S01:00000414:  13 D8 40 00 00 17
F02:0109       		bra.w .mfpWait
               S01:0000041A:  60 00 FF E8
F02:0110       	.stop:
F02:0111       		stop #$ffff
               S01:0000041E:  4E 72 FF FF
F02:0112       
F02:0113       	.text:
F02:0114       		dc.b "\n\nFatal error!\nReset computer to continue\n\n", $00
               S01:00000422:  0A 0A 46 61 74 61 6C 20 65 72 72 6F 72 21 0A 52
               S01:00000432:  65 73 65 74 20 63 6F 6D 70 75 74 65 72 20 74 6F
               S01:00000442:  00
F02:0115       		even
F02:0116       IgnoreInterrupt:		;just returns without doing anything
F02:0117               rte
               S01:0000044E:  4E 73
F02:0118       
F00:0006       .include "serial.asm"
F03:0001       ;initializes serial interface and timer D for 9600 baud
F03:0002       SerialInit:
F03:0003       		andi.b #$f0, MFP_TCDCR
               S01:00000450:  02 39 00 F0 40 00 00 0E
F03:0004               	ori.b #$01, MFP_TCDCR
               S01:00000458:  00 39 00 01 40 00 00 0E
F03:0005               	move.b #$04, MFP_TDDR ;TDO at 115200
               S01:00000460:  13 FC 00 04 40 00 00 12
F03:0006       
F03:0007               	move.b #$08, MFP_UCR ;CLK / 1, 8bit char, no parity
               S01:00000468:  13 FC 00 08 40 00 00 14
F03:0008       	        move.b #$04, MFP_TSR ;set h flag
               S01:00000470:  13 FC 00 04 40 00 00 16
F03:0009       	        move.b #$05, MFP_TSR ;enable transmitter
               S01:00000478:  13 FC 00 05 40 00 00 16
F03:0010       
F03:0011       	        move.b #$01, MFP_RSR ;enable receiver
               S01:00000480:  13 FC 00 01 40 00 00 15
F03:0012       
F03:0013       	        move.b #$40, MFP_VR ;MFP interrupt vector base at $40, Automatic end of interrupt mode
               S01:00000488:  13 FC 00 40 40 00 00 0B
F03:0014       	        bset.b #4, MFP_IERA ;enable receive buffer full interrupt
               S01:00000490:  08 F9 00 04 40 00 00 03
F03:0015       	        bset.b #4, MFP_IMRA ;unmask receive buffer full interrupt
               S01:00000498:  08 F9 00 04 40 00 00 09
F03:0016       	        rts
               S01:000004A0:  4E 75
F03:0017       
F03:0018       ;writes string to serial
F03:0019       SerialWrite: ;void (char* string)
F03:0020       		move.l (4, A7), A0
               S01:000004A2:  20 6F 00 04
F03:0021       	.loop:
F03:0022       		btst.b #7, MFP_TSR
               S01:000004A6:  08 39 00 07 40 00 00 16
F03:0023               	beq.w .loop ;as long as the BE flag is clear loop
               S01:000004AE:  67 00 FF F6
F03:0024       
F03:0025               	cmpi.b #$00, (A0)
               S01:000004B2:  4A 10
F03:0026               	beq.w .return
               S01:000004B4:  67 00 00 0C
F03:0027               	move.b (A0)+, MFP_UDR
               S01:000004B8:  13 D8 40 00 00 17
F03:0028               	bra.w .loop
               S01:000004BE:  60 00 FF E6
F03:0029               .return:
F03:0030               	rts
               S01:000004C2:  4E 75
F03:0031       
F03:0032       ;writes char to serial
F03:0033       SerialWriteChar: ;void (int char)
F03:0034       		btst #7, MFP_TSR
               S01:000004C4:  08 39 00 07 40 00 00 16
F03:0035       		beq.w SerialWriteChar
               S01:000004CC:  67 00 FF F6
F03:0036       
F03:0037       		move.w (4, A7), D0
               S01:000004D0:  30 2F 00 04
F03:0038       		move.b D0, MFP_UDR
               S01:000004D4:  13 C0 40 00 00 17
F03:0039       		rts
               S01:000004DA:  4E 75
F03:0040       
F03:0041       __SerialHexTable:
F03:0042       		dc.b "0123456789ABCDEF"
               S01:000004DC:  30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46
F03:0043       
F03:0044       ;writes 8 bit int to serial as hexadecimal
F03:0045       SerialWriteHex8: ;void (int number)
F03:0046       		move.l __SerialHexTable, A0
               S01:000004EC:  20 78 04 DC
F03:0047       	.loop0:
F03:0048       		btst.b #7, MFP_TSR
               S01:000004F0:  08 39 00 07 40 00 00 16
F03:0049       		beq.w .loop0
               S01:000004F8:  67 00 FF F6
F03:0050       
F03:0051       		move.w (4, A7), D0
               S01:000004FC:  30 2F 00 04
F03:0052       		andi.w #$00f0, D0
               S01:00000500:  02 40 00 F0
F03:0053       		lsr.b #4, D0
               S01:00000504:  E8 08
F03:0054       		move.b (0,A0,D0), MFP_UDR
               S01:00000506:  13 F0 00 00 40 00 00 17
F03:0055       	.loop1:
F03:0056       		btst.b #7, MFP_TSR
               S01:0000050E:  08 39 00 07 40 00 00 16
F03:0057       		beq.w .loop1
               S01:00000516:  67 00 FF F6
F03:0058       
F03:0059       		move.w (4, A7), D0
               S01:0000051A:  30 2F 00 04
F03:0060       		andi.w #$000f, D0
               S01:0000051E:  02 40 00 0F
F03:0061       		move.b (0,A0,D0), MFP_UDR
               S01:00000522:  13 F0 00 00 40 00 00 17
F03:0062       
F03:0063       		rts
               S01:0000052A:  4E 75
F03:0064       
F03:0065       ;writes 16 bit int to serial as hexadecimal
F03:0066       SerialWriteHex16: ;void (int number)
F03:0067       		move.w (4, A7), D0
               S01:0000052C:  30 2F 00 04
F03:0068       		andi.w #$ff00, D0
               S01:00000530:  02 40 FF 00
F03:0069       		lsr.b #8, D0
               S01:00000534:  E0 08
F03:0070       		move.w D0, -(A7)
               S01:00000536:  3F 00
F03:0071       		bsr.w SerialWriteHex8
               S01:00000538:  61 00 FF B2
F03:0072       		addq.l #2, A7
               S01:0000053C:  54 8F
F03:0073       
F03:0074       		move.w (4, A7), D0
               S01:0000053E:  30 2F 00 04
F03:0075       		andi.w #$00ff, D0
               S01:00000542:  02 40 00 FF
F03:0076       		move.w D0, -(A7)
               S01:00000546:  3F 00
F03:0077       		bsr.w SerialWriteHex8
               S01:00000548:  61 00 FF A2
F03:0078       		addq.l #2, A7
               S01:0000054C:  54 8F
F03:0079       
F03:0080       		rts
               S01:0000054E:  4E 75
F03:0081       
F03:0082       ;writes 32 bit int to serial as hexadecimal
F03:0083       SerialWriteHex32: ;void (long number)
F03:0084       		move.w (6, A7), D0
               S01:00000550:  30 2F 00 06
F03:0085       		move.w D0, -(A7)
               S01:00000554:  3F 00
F03:0086       		bsr.w SerialWriteHex16
               S01:00000556:  61 00 FF D4
F03:0087       		addq.l #2, A7
               S01:0000055A:  54 8F
F03:0088       
F03:0089       		move.w (4, A7), D0
               S01:0000055C:  30 2F 00 04
F03:0090       		move.w D0, -(A7)
               S01:00000560:  3F 00
F03:0091       		bsr.w SerialWriteHex16
               S01:00000562:  61 00 FF C8
F03:0092       		addq.l #2, A7
               S01:00000566:  54 8F
F03:0093       
F03:0094       		rts
               S01:00000568:  4E 75
F03:0095       
F03:0096       ;writes 32 bit int to serial as decimal
F03:0097       SerialWriteDec32: ;void (long number)
F03:0098       		move.l (4, A7), D0
               S01:0000056A:  20 2F 00 04
F03:0099       		move.l D2, -(A7)
               S01:0000056E:  2F 02
F03:0100       		clr.l D2
               S01:00000570:  74 00
F03:0101       		move.l __SerialHexTable, A0
               S01:00000572:  20 78 04 DC
F03:0102       
F03:0103       	.divLoop:
F03:0104       		cmpi.l #0, D0
               S01:00000576:  4A 80
F03:0105       		beq .display
               S01:00000578:  67 10
F03:0106       		divul.l #10, D1:D0
               S01:0000057A:  4C 7C 00 01 00 00 00 0A
F03:0107       		move.w D1, -(A7)
               S01:00000582:  3F 01
F03:0108       		addq.w #1, D2
               S01:00000584:  52 42
F03:0109       		bra.w .divLoop
               S01:00000586:  60 00 FF EE
F03:0110       
F03:0111       	.display:
F03:0112       		cmpi.w #0, D2
               S01:0000058A:  4A 42
F03:0113       		beq.w .return
               S01:0000058C:  67 00 00 20
F03:0114       		move.w (A7)+, D0
               S01:00000590:  30 1F
F03:0115       		addi.b #'0', D0
               S01:00000592:  06 00 00 30
F03:0116       	.waitMfp:
F03:0117       		btst.b #7, MFP_TSR
               S01:00000596:  08 39 00 07 40 00 00 16
F03:0118                       beq.w .waitMfp
               S01:0000059E:  67 00 FF F6
F03:0119       		move.b D0, MFP_UDR
               S01:000005A2:  13 C0 40 00 00 17
F03:0120       		subq #1, D2
               S01:000005A8:  53 42
F03:0121       		bra.w .display
               S01:000005AA:  60 00 FF DE
F03:0122       
F03:0123       	.return:
F03:0124       		move.l (A7)+, D2
               S01:000005AE:  24 1F
F03:0125       		rts
               S01:000005B0:  4E 75
F03:0126       
F03:0127       ;writes 16 bit int to serial as decimal
F03:0128       SerialWriteDec16: ;void (int number)
F03:0129       		clr.l D0
               S01:000005B2:  70 00
F03:0130       		move.w (4, A7), D0
               S01:000005B4:  30 2F 00 04
F03:0131       		move.l D0, -(A7)
               S01:000005B8:  2F 00
F03:0132       		bsr.w SerialWriteDec32
               S01:000005BA:  61 00 FF AE
F03:0133       		addq.l #4, A7
               S01:000005BE:  58 8F
F03:0134       		rts
               S01:000005C0:  4E 75
F03:0135       
F03:0136       ;interrupt handler for serial receiver
F03:0137       SerialRXHandler: ;void ()
F03:0138       		;move.w IDE1_BASE, D0
F03:0139       		;bra.w SerialRXHandler
F03:0140       
F03:0141       
F03:0142       		move.l D0, -(A7)
               S01:000005C2:  2F 00
F03:0143       		move.l D1, -(A7)
               S01:000005C4:  2F 01
F03:0144       		move.l A0, -(A7)
               S01:000005C6:  2F 08
F03:0145       
F03:0146       		move.l __SerialRingbuffer, A0
               S01:000005C8:  20 79 10 00 00 00
F03:0147       		move.w (__SerialRBWrite), D0
               S01:000005CE:  30 39 10 00 02 02
F03:0148       		move.b MFP_UDR, D1
               S01:000005D4:  12 39 40 00 00 17
F03:0149       		move.b D0, MFP_UDR
               S01:000005DA:  13 C0 40 00 00 17
F03:0150       		andi.w #$00ff, D1
               S01:000005E0:  02 41 00 FF
F03:0151       		move.w D1, (0, A0, D0.w*2)
               S01:000005E4:  31 81 02 00
F03:0152       		addq.w #1, D0
               S01:000005E8:  52 40
F03:0153       		andi.w #$00ff, D0
               S01:000005EA:  02 40 00 FF
F03:0154       		move.w D0, __SerialRBWrite
               S01:000005EE:  33 C0 10 00 02 02
F03:0155       
F03:0156       		move.l (A7)+, A0
               S01:000005F4:  20 5F
F03:0157       		move.l (A7)+, D1
               S01:000005F6:  22 1F
F03:0158       		move.l (A7)+, D0
               S01:000005F8:  20 1F
F03:0159       		rte
               S01:000005FA:  4E 73
F03:0160       
F03:0161       ;returns the number of characters to read from the ringbuffer
F03:0162       SerialAvailable: ;int ()
F03:0163       		move.w (__SerialRBWrite), D0
               S01:000005FC:  30 39 10 00 02 02
F03:0164       		move.w (__SerialRBRead), D1
               S01:00000602:  32 39 10 00 02 00
F03:0165       		sub.w D1, D0
               S01:00000608:  90 41
F03:0166       		andi.w #$00ff, D0
               S01:0000060A:  02 40 00 FF
F03:0167       		rts
               S01:0000060E:  4E 75
F03:0168       
F03:0169       ;read a character from the ringbuffer, returns zero if buffer empty
F03:0170       SerialRead: ;int ()
F03:0171       		bsr SerialAvailable
               S01:00000610:  61 EA
F03:0172       		cmp.w #0, D0
               S01:00000612:  4A 40
F03:0173       		beq .return ;no data in the buffer, return
               S01:00000614:  67 10
F03:0174       
F03:0175       		move.w (__SerialRBRead), D0
               S01:00000616:  30 39 10 00 02 00
F03:0176       		move.l __SerialRingbuffer, A0
               S01:0000061C:  20 79 10 00 00 00
F03:0177       		move.w (0, A0, D0.w*2), D0
               S01:00000622:  30 30 02 00
F03:0178       
F03:0179       	.return:
F03:0180       		rts
               S01:00000626:  4E 75
F03:0181       
F00:0007       .include "ide.asm"
F04:0001       IdeInit:
F04:0002       		rts
               S01:00000628:  4E 75
F04:0003       
F00:0008       
F00:0009       Main:
F00:0010       		jsr SerialInit
               S01:0000062A:  4E B8 04 50
F00:0011       		move.l #.text0, -(A7)
               S01:0000062E:  2F 3C 00 00 06 5E
F00:0012       		jsr SerialWrite
               S01:00000634:  4E B8 04 A2
F00:0013       		addq.l #4, A7
               S01:00000638:  58 8F
F00:0014       		bsr getBootblockCount
               S01:0000063A:  61 00 01 50
F00:0015       		move.w D0, D2 ;move bootblock count to trash proof register
               S01:0000063E:  34 00
F00:0016       		jsr SerialWriteDec16
               S01:00000640:  4E B8 05 B2
F00:0017       		move.w '\n', -(A7)
               S01:00000644:  3F 38 00 0A
F00:0018       		jsr SerialWriteChar
               S01:00000648:  4E B8 04 C4
F00:0019       		addq.l #2, A7
               S01:0000064C:  54 8F
F00:0020       
F00:0021       		andi.w #$f8ff, SR
               S01:0000064E:  02 7C F8 FF
F00:0022       
F00:0023       	.loop:
F00:0024       		move.w IDE0_BASE, D0
               S01:00000652:  30 39 20 00 00 00
F00:0025       		bra.l .loop
               S01:00000658:  60 FF FF FF FF F8
F00:0026       
F00:0027       	.text0:
F00:0028       	;ascii text font Doom (www.coolgenerator.com/ascii-text-generator)
F00:0029       		dc.b "\n\n"
               S01:0000065E:  0A 0A
F00:0030       		dc.b "______ _____ _____ _____  _____  _____  _____\n"
               S01:00000660:  5F 5F 5F 5F 5F 5F 20 5F 5F 5F 5F 5F 20 5F 5F 5F
               S01:00000670:  5F 5F 20 5F 5F 5F 5F 5F 20 20 5F 5F 5F 5F 5F 20
F00:0031       		dc.b "| ___ \\_   _|  _  /  ___||  _  |/ __  \\|  _  |\n"
               S01:0000068E:  7C 20 5F 5F 5F 20 5C 5F 20 20 20 5F 7C 20 20 5F
               S01:0000069E:  20 20 2F 20 20 5F 5F 5F 7C 7C 20 20 5F 20 20 7C
F00:0032       		dc.b "| |_/ / | | | | | \\ `--. | |/' |`' / /'| |/' |\n"
               S01:000006BD:  7C 20 7C 5F 2F 20 2F 20 7C 20 7C 20 7C 20 7C 20
               S01:000006CD:  7C 20 5C 20 60 2D 2D 2E 20 7C 20 7C 2F 27 20 7C
F00:0033       		dc.b "| ___ \\ | | | | | |`--. \\|  /| |  / /  |  /| |\n"
               S01:000006EC:  7C 20 5F 5F 5F 20 5C 20 7C 20 7C 20 7C 20 7C 20
               S01:000006FC:  7C 20 7C 60 2D 2D 2E 20 5C 7C 20 20 2F 7C 20 7C
F00:0034       		dc.b "| |_/ /_| |_\\ \\_/ /\\__/ /\\ |_/ /./ /___\\ |_/ /\n"
               S01:0000071B:  7C 20 7C 5F 2F 20 2F 5F 7C 20 7C 5F 5C 20 5C 5F
               S01:0000072B:  2F 20 2F 5C 5F 5F 2F 20 2F 5C 20 7C 5F 2F 20 2F
F00:0035       		dc.b "\\____/ \\___/ \\___/\\____/  \\___/ \\_____/ \\___/"
               S01:0000074A:  5C 5F 5F 5F 5F 2F 20 5C 5F 5F 5F 2F 20 5C 5F 5F
               S01:0000075A:  5F 2F 5C 5F 5F 5F 5F 2F 20 20 5C 5F 5F 5F 2F 20
F00:0036       		dc.b "\n\n"
               S01:00000777:  0A 0A
F00:0037       		dc.b "Bootblocks found:", $00
               S01:00000779:  42 6F 6F 74 62 6C 6F 63 6B 73 20 66 6F 75 6E 64
               S01:00000789:  3A
               S01:0000078A:  00
F00:0038       
F00:0039       even
F00:0040       getBootblockCount:
F00:0041       		move.l #12345, D0
               S01:0000078C:  20 3C 00 00 30 39
F00:0042       		rts
               S01:00000792:  4E 75
F00:0043       
F00:0044       
F00:0045       BIOS_END:
F00:0046       ;Alignment hack because madmac does not support alignment to an arbitary size
F00:0047       ;This align is needed because right after the bios follows the first bootblock but that has to be aligned to 256 bytes b
F00:0048       ;(actually 128 bytes per page but because we use two eeproms (29ee010) in tandem the page size is twice as large)
F00:0049       ;If the target to compile to has a different page size this has to be changed
F00:0050       ;I advice not to look at this code for to long. If it works dont change it...
F00:0051       if ((BIOS_END & $ff) != 0) ;check if alligned to 256 byte boundry
F00:0052       	ds.b 256 - (BIOS_END & $ff) ;if not alligned then add filler
F00:0053       endif
F00:0054       print "BIOS_END: ", /d/l BIOS_END
F00:0055       
F00:0056       FIRST_BOOTBLOCK:
F00:0057       ;the first bootblock starts here
F00:0058       print "FIRST_BOOTBLOCK: ", /d/l FIRST_BOOTBLOCK
F00:0059       print "Filled bytes: ", /d FIRST_BOOTBLOCK - BIOS_END
F00:0060       
F00:0061       .include "ramdefs.asm"
F05:0001       abs RAM_BASE
F05:0002       
F05:0003       __SerialRingbuffer: ;clean ringbuffer
F05:0004       		ds.w 256
F05:0005       __SerialRBRead: ;read index into ringbuffer
F05:0006       		ds.w 1
F05:0007       __SerialRBWrite: ;write index into ringbuffer
F05:0008       		ds.w 1
F05:0009       
F00:0062       


Sections:
S01  seg0


Sources:
F00  main.asm
F01  system.asm
F02  vector.asm
F03  serial.asm
F04  ide.asm
F05  ramdefs.asm


Symbols:
FIRST_BOOTBLOCK EXPR(2048=0x800) ABS 
BIOS_END EXPR(1940=0x794) ABS 
 Main .loop EXPR(1618=0x652) ABS 
getBootblockCount EXPR(1932=0x78c) ABS 
 Main .text0 EXPR(1630=0x65e) ABS 
IdeInit EXPR(1576=0x628) UNUSED ABS 
 SerialRead .return EXPR(1574=0x626) ABS 
SerialRead EXPR(1552=0x610) UNUSED ABS 
__SerialRBRead EXPR(268435968=0x10000200) 
SerialAvailable EXPR(1532=0x5fc) ABS 
__SerialRBWrite EXPR(268435970=0x10000202) 
__SerialRingbuffer EXPR(268435456=0x10000000) 
SerialWriteDec16 EXPR(1458=0x5b2) ABS 
 SerialWriteDec32 .waitMfp EXPR(1430=0x596) ABS 
 SerialWriteDec32 .return EXPR(1454=0x5ae) ABS 
 SerialWriteDec32 .display EXPR(1418=0x58a) ABS 
 SerialWriteDec32 .divLoop EXPR(1398=0x576) ABS 
SerialWriteDec32 EXPR(1386=0x56a) ABS 
SerialWriteHex32 EXPR(1360=0x550) UNUSED ABS 
SerialWriteHex16 EXPR(1324=0x52c) ABS 
 SerialWriteHex8 .loop1 EXPR(1294=0x50e) ABS 
 SerialWriteHex8 .loop0 EXPR(1264=0x4f0) ABS 
SerialWriteHex8 EXPR(1260=0x4ec) ABS 
__SerialHexTable EXPR(1244=0x4dc) ABS 
SerialWriteChar EXPR(1220=0x4c4) ABS 
 SerialWrite .return EXPR(1218=0x4c2) ABS 
 SerialWrite .loop EXPR(1190=0x4a6) ABS 
SerialWrite EXPR(1186=0x4a2) ABS 
SerialInit EXPR(1104=0x450) ABS 
 FatalError .stop EXPR(1054=0x41e) ABS 
 FatalError .mfpWait EXPR(1028=0x404) ABS 
 FatalError .text EXPR(1058=0x422) ABS 
SerialRXHandler EXPR(1474=0x5c2) ABS 
IgnoreInterrupt EXPR(1102=0x44e) ABS 
FatalError EXPR(1024=0x400) ABS 
Main EXPR(1578=0x62a) ABS 
IDE_LBAH EXPR(536870922=0x2000000a) UNUSED EQU 
IDE_LBAM EXPR(536870920=0x20000008) UNUSED EQU 
IDE_LBAL EXPR(536870918=0x20000006) UNUSED EQU 
IDE_DRVA EXPR(805306382=0x3000000e) UNUSED EQU 
IDE_DIGO EXPR(805306380=0x3000000c) UNUSED EQU 
IDE_ASTAT EXPR(805306380=0x3000000c) UNUSED EQU 
IDE_CMD EXPR(536870926=0x2000000e) UNUSED EQU 
IDE_WP EXPR(536870914=0x20000002) UNUSED EQU 
IDE_STAT EXPR(536870926=0x2000000e) UNUSED EQU 
IDE_SDH EXPR(536870924=0x2000000c) UNUSED EQU 
IDE_CH EXPR(536870922=0x2000000a) UNUSED EQU 
IDE_CL EXPR(536870920=0x20000008) UNUSED EQU 
IDE_SN EXPR(536870918=0x20000006) UNUSED EQU 
IDE_SC EXPR(536870916=0x20000004) UNUSED EQU 
IDE_E EXPR(536870914=0x20000002) UNUSED EQU 
IDE_D EXPR(536870912=0x20000000) UNUSED EQU 
MFP_UDR EXPR(1073741847=0x40000017) EQU 
MFP_TSR EXPR(1073741846=0x40000016) EQU 
MFP_RSR EXPR(1073741845=0x40000015) EQU 
MFP_UCR EXPR(1073741844=0x40000014) EQU 
MFP_SCR EXPR(1073741843=0x40000013) UNUSED EQU 
MFP_TDDR EXPR(1073741842=0x40000012) EQU 
MFP_TCDR EXPR(1073741841=0x40000011) UNUSED EQU 
MFP_TBDR EXPR(1073741840=0x40000010) UNUSED EQU 
MFP_TADR EXPR(1073741839=0x4000000f) UNUSED EQU 
MFP_TCDCR EXPR(1073741838=0x4000000e) EQU 
MFP_TBCR EXPR(1073741837=0x4000000d) UNUSED EQU 
MFP_TACR EXPR(1073741836=0x4000000c) UNUSED EQU 
MFP_VR EXPR(1073741835=0x4000000b) EQU 
MFP_IMRB EXPR(1073741834=0x4000000a) UNUSED EQU 
MFP_IMRA EXPR(1073741833=0x40000009) EQU 
MFP_ISRB EXPR(1073741832=0x40000008) UNUSED EQU 
MFP_ISRA EXPR(1073741831=0x40000007) UNUSED EQU 
MFP_IPRB EXPR(1073741830=0x40000006) UNUSED EQU 
MFP_IPRA EXPR(1073741829=0x40000005) UNUSED EQU 
MFP_IERB EXPR(1073741828=0x40000004) UNUSED EQU 
MFP_IERA EXPR(1073741827=0x40000003) EQU 
MFP_DDR EXPR(1073741826=0x40000002) UNUSED EQU 
MFP_AER EXPR(1073741825=0x40000001) UNUSED EQU 
MFP_GPDR EXPR(1073741824=0x40000000) UNUSED EQU 
STACK_INIT EXPR(269484032=0x10100000) EQU 
IDE1_BASE EXPR(805306368=0x30000000) EQU 
IDE0_BASE EXPR(536870912=0x20000000) EQU 
MFP_BASE EXPR(1073741824=0x40000000) EQU 
RAM_PAGES EXPR(1024=0x400) UNUSED EQU 
RAM_TOP EXPR(269484032=0x10100000) EQU 
RAM_SIZE EXPR(1048576=0x100000) EQU 
RAM_BASE EXPR(268435456=0x10000000) EQU 
ROM_TOP EXPR(262144=0x40000) UNUSED EQU 
ROM_SIZE EXPR(262144=0x40000) EQU 
ROM_BASE EXPR(0=0x0) EQU 
_MOVEMBYTES EXPR(0=0x0) INTERNAL 
 MOVEMSIZE EXPR(0=0x0) INTERNAL 
_MOVEMREGS EXPR(0=0x0) INTERNAL 
__VASM EXPR(4=0x4) INTERNAL 
__UNIXFS EXPR(0=0x0) INTERNAL 

There have been no errors.
