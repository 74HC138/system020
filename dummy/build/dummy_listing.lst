F00:0001       ;-----------------------------------------------------------------------------
F00:0002       ;Base definitions
F00:0003       ROM_BASE        = $00000000
F00:0004       ROM_SIZE        = $00040000
F00:0005       ROM_TOP         =  ROM_BASE + ROM_SIZE
F00:0006       
F00:0007       RAM_BASE        = $10000000
F00:0008       RAM_SIZE        = $00100000
F00:0009       RAM_TOP         = RAM_BASE + RAM_SIZE
F00:0010       RAM_PAGES       = RAM_SIZE / 1024
F00:0011       
F00:0012       MFP_BASE        = $40000000
F00:0013       
F00:0014       IDE0_BASE	= $20000000
F00:0015       IDE1_BASE	= $30000000
F00:0016       
F00:0017       STACK_INIT	= RAM_TOP
F00:0018       
F00:0019       ;-----------------------------------------------------------------------------
F00:0020       ;MFP registers
F00:0021       MFP_GPDR        = MFP_BASE + $00
F00:0022       MFP_AER         = MFP_BASE + $01
F00:0023       MFP_DDR         = MFP_BASE + $02
F00:0024       MFP_IERA        = MFP_BASE + $03
F00:0025       MFP_IERB        = MFP_BASE + $04
F00:0026       MFP_IPRA        = MFP_BASE + $05
F00:0027       MFP_IPRB        = MFP_BASE + $06
F00:0028       MFP_ISRA        = MFP_BASE + $07
F00:0029       MFP_ISRB        = MFP_BASE + $08
F00:0030       MFP_IMRA        = MFP_BASE + $09
F00:0031       MFP_IMRB        = MFP_BASE + $0A
F00:0032       MFP_VR          = MFP_BASE + $0B
F00:0033       MFP_TACR        = MFP_BASE + $0C
F00:0034       MFP_TBCR        = MFP_BASE + $0D
F00:0035       MFP_TCDCR       = MFP_BASE + $0E
F00:0036       MFP_TADR        = MFP_BASE + $0F
F00:0037       MFP_TBDR        = MFP_BASE + $10
F00:0038       MFP_TCDR        = MFP_BASE + $11
F00:0039       MFP_TDDR        = MFP_BASE + $12
F00:0040       MFP_SCR         = MFP_BASE + $13
F00:0041       MFP_UCR         = MFP_BASE + $14
F00:0042       MFP_RSR         = MFP_BASE + $15
F00:0043       MFP_TSR         = MFP_BASE + $16
F00:0044       MFP_UDR         = MFP_BASE + $17
F00:0045       
F00:0046       ;-----------------------------------------------------------------------------
F00:0047       ;Assembler directives
F00:0048       org ROM_BASE
F00:0049       text
F00:0050       
F00:0051       ;-----------------------------------------------------------------------------
F00:0052       ;exception vector table
F00:0053       dc.l STACK_INIT                 ;Reset Initial Interrupt Stack Pointer
               S02:00000000:  10 10 00 00
F00:0054       dc.l Main                       ;Reset Initial Program Counter
               S02:00000004:  00 00 04 0C [R]
F00:0055       dc.l FatalError                 ;Bus error
               S02:00000008:  00 00 04 00 [R]
F00:0056       dc.l FatalError                 ;Address error
               S02:0000000C:  00 00 04 00 [R]
F00:0057       
F00:0058       dc.l FatalError                 ;Illigal Instruction
               S02:00000010:  00 00 04 00 [R]
F00:0059       dc.l FatalError                 ;Zero Divide
               S02:00000014:  00 00 04 00 [R]
F00:0060       dc.l FatalError                 ;CHK, CHK2 Instruction
               S02:00000018:  00 00 04 00 [R]
F00:0061       dc.l FatalError                 ;cpTRAPcc, TRAPcc, TRAPV Instructions
               S02:0000001C:  00 00 04 00 [R]
F00:0062       
F00:0063       dc.l FatalError                 ;Privilege Violation
               S02:00000020:  00 00 04 00 [R]
F00:0064       dc.l IgnoreInterrupt            ;Trace
               S02:00000024:  00 00 04 0A [R]
F00:0065       dc.l IgnoreInterrupt            ;Line 1010 Emulator
               S02:00000028:  00 00 04 0A [R]
F00:0066       dc.l IgnoreInterrupt            ;Line 1111 Emulator
               S02:0000002C:  00 00 04 0A [R]
F00:0067       
F00:0068       dc.l IgnoreInterrupt            ;(Reserved)
               S02:00000030:  00 00 04 0A [R]
F00:0069       dc.l FatalError                 ;Coprocessor Protocol Violation
               S02:00000034:  00 00 04 00 [R]
F00:0070       dc.l FatalError                 ;Format error
               S02:00000038:  00 00 04 00 [R]
F00:0071       dc.l FatalError                 ;Uninitialized Interrupt
               S02:0000003C:  00 00 04 00 [R]
F00:0072       
F00:0073       dc.l IgnoreInterrupt            ;(Unasigned)
               S02:00000040:  00 00 04 0A [R]
F00:0074       dc.l IgnoreInterrupt            ;(Unasigned)
               S02:00000044:  00 00 04 0A [R]
F00:0075       dc.l IgnoreInterrupt            ;(Unasigned)
               S02:00000048:  00 00 04 0A [R]
F00:0076       dc.l IgnoreInterrupt            ;(Unasigned)
               S02:0000004C:  00 00 04 0A [R]
F00:0077       dc.l IgnoreInterrupt            ;(Unasigned)
               S02:00000050:  00 00 04 0A [R]
F00:0078       dc.l IgnoreInterrupt            ;(Unasigned)
               S02:00000054:  00 00 04 0A [R]
F00:0079       dc.l IgnoreInterrupt            ;(Unasigned)
               S02:00000058:  00 00 04 0A [R]
F00:0080       dc.l IgnoreInterrupt            ;(Unasigned)
               S02:0000005C:  00 00 04 0A [R]
F00:0081       
F00:0082       dc.l IgnoreInterrupt            ;Spurious Interrupt
               S02:00000060:  00 00 04 0A [R]
F00:0083       dc.l IgnoreInterrupt            ;Level 1 Interrupt Autovector
               S02:00000064:  00 00 04 0A [R]
F00:0084       dc.l IgnoreInterrupt            ;Level 2 Interrupt Autovector
               S02:00000068:  00 00 04 0A [R]
F00:0085       dc.l IgnoreInterrupt            ;Level 3 Interrupt Autovector
               S02:0000006C:  00 00 04 0A [R]
F00:0086       
F00:0087       dc.l IgnoreInterrupt            ;Level 4 Interrupt Autovector
               S02:00000070:  00 00 04 0A [R]
F00:0088       dc.l IgnoreInterrupt            ;Level 5 Interrupt Autovector
               S02:00000074:  00 00 04 0A [R]
F00:0089       dc.l IgnoreInterrupt            ;Level 6 Interrupt Autovector
               S02:00000078:  00 00 04 0A [R]
F00:0090       dc.l IgnoreInterrupt            ;Level 7 Interrupt Autovector
               S02:0000007C:  00 00 04 0A [R]
F00:0091       
F00:0092       dc.l IgnoreInterrupt            ;TRAP #0
               S02:00000080:  00 00 04 0A [R]
F00:0093       dc.l IgnoreInterrupt            ;TRAP #1
               S02:00000084:  00 00 04 0A [R]
F00:0094       dc.l IgnoreInterrupt            ;TRAP #2
               S02:00000088:  00 00 04 0A [R]
F00:0095       dc.l IgnoreInterrupt            ;TRAP #3
               S02:0000008C:  00 00 04 0A [R]
F00:0096       dc.l IgnoreInterrupt            ;TRAP #4
               S02:00000090:  00 00 04 0A [R]
F00:0097       dc.l IgnoreInterrupt            ;TRAP #5
               S02:00000094:  00 00 04 0A [R]
F00:0098       dc.l IgnoreInterrupt            ;TRAP #6
               S02:00000098:  00 00 04 0A [R]
F00:0099       dc.l IgnoreInterrupt            ;TRAP #7
               S02:0000009C:  00 00 04 0A [R]
F00:0100       dc.l IgnoreInterrupt            ;TRAP #8
               S02:000000A0:  00 00 04 0A [R]
F00:0101       dc.l IgnoreInterrupt            ;TRAP #9
               S02:000000A4:  00 00 04 0A [R]
F00:0102       dc.l IgnoreInterrupt            ;TRAP #10
               S02:000000A8:  00 00 04 0A [R]
F00:0103       dc.l IgnoreInterrupt            ;TRAP #11
               S02:000000AC:  00 00 04 0A [R]
F00:0104       dc.l IgnoreInterrupt            ;TRAP #12
               S02:000000B0:  00 00 04 0A [R]
F00:0105       dc.l IgnoreInterrupt            ;TRAP #13
               S02:000000B4:  00 00 04 0A [R]
F00:0106       dc.l IgnoreInterrupt            ;TRAP #14
               S02:000000B8:  00 00 04 0A [R]
F00:0107       dc.l IgnoreInterrupt            ;TRAP #15
               S02:000000BC:  00 00 04 0A [R]
F00:0108       
F00:0109       dc.l IgnoreInterrupt            ;FPCP Branch or Set on Unordered Condition
               S02:000000C0:  00 00 04 0A [R]
F00:0110       dc.l IgnoreInterrupt            ;FPCP Inexact Result
               S02:000000C4:  00 00 04 0A [R]
F00:0111       dc.l IgnoreInterrupt            ;FPCP Divide by Zero
               S02:000000C8:  00 00 04 0A [R]
F00:0112       dc.l IgnoreInterrupt            ;FPCP Underflow
               S02:000000CC:  00 00 04 0A [R]
F00:0113       
F00:0114       dc.l IgnoreInterrupt            ;FPCP Operand error
               S02:000000D0:  00 00 04 0A [R]
F00:0115       dc.l IgnoreInterrupt            ;FPCP Overflow
               S02:000000D4:  00 00 04 0A [R]
F00:0116       dc.l IgnoreInterrupt            ;FPCP Signaling NAN
               S02:000000D8:  00 00 04 0A [R]
F00:0117       dc.l IgnoreInterrupt            ;(Unasigned)
               S02:000000DC:  00 00 04 0A [R]
F00:0118       
F00:0119       dc.l IgnoreInterrupt            ;PMMU Configuration
               S02:000000E0:  00 00 04 0A [R]
F00:0120       dc.l IgnoreInterrupt            ;PMMU Illigal Operation
               S02:000000E4:  00 00 04 0A [R]
F00:0121       dc.l IgnoreInterrupt            ;PMMU Access Level Violation
               S02:000000E8:  00 00 04 0A [R]
F00:0122       
F00:0123       dc.l IgnoreInterrupt            ;(Unasigned)
               S02:000000EC:  00 00 04 0A [R]
F00:0124       dc.l IgnoreInterrupt            ;(Unasigned)
               S02:000000F0:  00 00 04 0A [R]
F00:0125       dc.l IgnoreInterrupt            ;(Unasigned)
               S02:000000F4:  00 00 04 0A [R]
F00:0126       dc.l IgnoreInterrupt            ;(Unasigned)
               S02:000000F8:  00 00 04 0A [R]
F00:0127       dc.l IgnoreInterrupt            ;(Unasigned)
               S02:000000FC:  00 00 04 0A [R]
F00:0128       
F00:0129       dc.l IgnoreInterrupt            ;MFP General Purpose Interrupt 0
               S02:00000100:  00 00 04 0A [R]
F00:0130       dc.l IgnoreInterrupt            ;MFP General Purpose Interrupt 1
               S02:00000104:  00 00 04 0A [R]
F00:0131       dc.l IgnoreInterrupt            ;MFP General Purpose Interrupt 2
               S02:00000108:  00 00 04 0A [R]
F00:0132       dc.l IgnoreInterrupt            ;MFP General Purpose Interrupt 3
               S02:0000010C:  00 00 04 0A [R]
F00:0133       dc.l IgnoreInterrupt            ;MFP Timer D
               S02:00000110:  00 00 04 0A [R]
F00:0134       dc.l IgnoreInterrupt            ;MFP Timer C
               S02:00000114:  00 00 04 0A [R]
F00:0135       dc.l IgnoreInterrupt            ;MFP General Purpose Interrupt 4
               S02:00000118:  00 00 04 0A [R]
F00:0136       dc.l IgnoreInterrupt            ;MFP General Purpose Interrupt 5
               S02:0000011C:  00 00 04 0A [R]
F00:0137       dc.l IgnoreInterrupt            ;MFP Timer B
               S02:00000120:  00 00 04 0A [R]
F00:0138       dc.l IgnoreInterrupt            ;MFP Transmit Error
               S02:00000124:  00 00 04 0A [R]
F00:0139       dc.l IgnoreInterrupt            ;MFP Transmit Buffer Empty
               S02:00000128:  00 00 04 0A [R]
F00:0140       dc.l IgnoreInterrupt            ;MFP Receive Error
               S02:0000012C:  00 00 04 0A [R]
F00:0141       dc.l IgnoreInterrupt            ;MFP Receive Buffer Full
               S02:00000130:  00 00 04 0A [R]
F00:0142       dc.l IgnoreInterrupt            ;MFP Timer A
               S02:00000134:  00 00 04 0A [R]
F00:0143       dc.l IgnoreInterrupt            ;MFP General Purpose Interrupt 6
               S02:00000138:  00 00 04 0A [R]
F00:0144       dc.l IgnoreInterrupt            ;MFP General Purpose Interrupt 7
               S02:0000013C:  00 00 04 0A [R]
F00:0145       
F00:0146       dcb.l 176, IgnoreInterrupt      ;User defined Interrupts
F00:0147       ;-----------------------------------------------------------------------------
F00:0148       ;Basic exception handling function
F00:0149       FatalError:			;locks up cpu completely until reset
F00:0150               move.w IDE0_BASE, D0
               S02:00000400:  30 39 20 00 00 00
F00:0151               bra.w FatalError
               S02:00000406:  60 00 FF F8
F00:0152       IgnoreInterrupt:		;just returns without doing anything
F00:0153               rte
               S02:0000040A:  4E 73
F00:0154       
F00:0155       ;-----------------------------------------------------------------------------
F00:0156       ;dummy code
F00:0157       Main:
F00:0158               bsr SerialInit
               S02:0000040C:  61 2A
F00:0159       
F00:0160               clr.l D2
               S02:0000040E:  74 00
F00:0161           .loop:
F00:0162       		move.l #.text, -(A7)
               S02:00000410:  2F 3C 00 00 04 34 [R]
F00:0163       		bsr SerialWrite
               S02:00000416:  61 00 00 C6
F00:0164       		addq.l #4, A7
               S02:0000041A:  58 8F
F00:0165       
F00:0166               move.w D2, -(A7)
               S02:0000041C:  3F 02
F00:0167       		jsr SerialWriteHex16
               S02:0000041E:  61 00 00 9A
F00:0168       		addq.l #2, A7
               S02:00000422:  54 8F
F00:0169               addq.l #1, D2
               S02:00000424:  52 82
F00:0170       		cmpi.w #$0200, D2
               S02:00000426:  0C 42 02 00
F00:0171               bne .loop
               S02:0000042A:  66 E4
F00:0172       
F00:0173       	.stopLoop:
F00:0174       		move.w IDE1_BASE, D0
               S02:0000042C:  30 39 30 00 00 00
F00:0175       		jmp .stopLoop
               S02:00000432:  60 F8
F00:0176       
F00:0177       	.text:
F00:0178       		dc.b "\n0x", $00
               S02:00000434:  0A 30 78
               S02:00000437:  00
F00:0179       		even
F00:0180       
F00:0181       SerialInit:
F00:0182       		andi.b #$f0, MFP_TCDCR
               S02:00000438:  02 39 00 F0 40 00 00 0E
F00:0183       		ori.b #$01, MFP_TCDCR
               S02:00000440:  00 39 00 01 40 00 00 0E
F00:0184       		move.b #$30, MFP_TDDR ;TDO clock divider for 9600 baud serial
               S02:00000448:  13 FC 00 30 40 00 00 12
F00:0185       
F00:0186       		move.b #$08, MFP_UCR ;CLK / 1, 8bit char, no parity
               S02:00000450:  13 FC 00 08 40 00 00 14
F00:0187       		move.b #$04, MFP_TSR ;set h flag
               S02:00000458:  13 FC 00 04 40 00 00 16
F00:0188       		move.b #$05, MFP_TSR ;enable transmitter
               S02:00000460:  13 FC 00 05 40 00 00 16
F00:0189               rts
               S02:00000468:  4E 75
F00:0190       
F00:0191       __SerialHexTable:
F00:0192       		dc.b "0123456789ABCDEF"
               S02:0000046A:  30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46
F00:0193       SerialWriteHex8: ;void (int number)
F00:0194       		move.l #__SerialHexTable, A0
               S02:0000047A:  41 FA FF EE
F00:0195       	.loop0:
F00:0196       		btst.b #7, MFP_TSR
               S02:0000047E:  08 39 00 07 40 00 00 16
F00:0197       		beq.w .loop0
               S02:00000486:  67 00 FF F6
F00:0198       
F00:0199       		move.w (4, A7), D0
               S02:0000048A:  30 2F 00 04
F00:0200       		andi.w #$00f0, D0
               S02:0000048E:  02 40 00 F0
F00:0201       		lsr.b #4, D0
               S02:00000492:  E8 08
F00:0202       		move.b (0,A0,D0), MFP_UDR
               S02:00000494:  13 F0 00 00 40 00 00 17
F00:0203       	.loop1:
F00:0204       		btst.b #7, MFP_TSR
               S02:0000049C:  08 39 00 07 40 00 00 16
F00:0205       		beq.w .loop1
               S02:000004A4:  67 00 FF F6
F00:0206       
F00:0207       		move.w (4, A7), D0
               S02:000004A8:  30 2F 00 04
F00:0208       		andi.w #$000f, D0
               S02:000004AC:  02 40 00 0F
F00:0209       		move.b (0,A0,D0), MFP_UDR
               S02:000004B0:  13 F0 00 00 40 00 00 17
F00:0210       
F00:0211       		rts
               S02:000004B8:  4E 75
F00:0212       
F00:0213       SerialWriteHex16: ;void (int number)
F00:0214       		move.w (4, A7), D0
               S02:000004BA:  30 2F 00 04
F00:0215       		andi.w #$ff00, D0
               S02:000004BE:  02 40 FF 00
F00:0216       		lsr.w #8, D0
               S02:000004C2:  E0 48
F00:0217       		move.w D0, -(A7)
               S02:000004C4:  3F 00
F00:0218       		bsr.w SerialWriteHex8
               S02:000004C6:  61 00 FF B2
F00:0219       		addq.l #2, A7
               S02:000004CA:  54 8F
F00:0220       
F00:0221       		move.w (4, A7), D0
               S02:000004CC:  30 2F 00 04
F00:0222       		andi.w #$00ff, D0
               S02:000004D0:  02 40 00 FF
F00:0223       		move.w D0, -(A7)
               S02:000004D4:  3F 00
F00:0224       		bsr.w SerialWriteHex8
               S02:000004D6:  61 00 FF A2
F00:0225       		addq.l #2, A7
               S02:000004DA:  54 8F
F00:0226       
F00:0227       		rts
               S02:000004DC:  4E 75
F00:0228       
F00:0229       SerialWrite: ;void (char* string)
F00:0230       		move.l (4, A7), A0
               S02:000004DE:  20 6F 00 04
F00:0231       	.loop:
F00:0232       		btst.b #7, MFP_TSR
               S02:000004E2:  08 39 00 07 40 00 00 16
F00:0233       		beq.w .loop ;as long as the BE flag is clear loop
               S02:000004EA:  67 00 FF F6
F00:0234       
F00:0235       		cmpi.b #$00, (A0)
               S02:000004EE:  4A 10
F00:0236       		beq.w .return
               S02:000004F0:  67 00 00 0C
F00:0237       		move.b (A0)+, MFP_UDR
               S02:000004F4:  13 D8 40 00 00 17
F00:0238       		bra.w .loop
               S02:000004FA:  60 00 FF E6
F00:0239       	.return:
F00:0240       		rts
               S02:000004FE:  4E 75
F00:0241       ;-----------------------------------------------------------------------------
F00:0242       ;bss section
F00:0243       


Sections:
S01  seg0
S02  .text


Sources:
F00  dummy.asm


Symbols:
 SerialWrite .return LAB (0x4fe) sec=.text 
 SerialWrite .loop LAB (0x4e2) sec=.text 
 SerialWriteHex8 .loop1 LAB (0x49c) sec=.text 
 SerialWriteHex8 .loop0 LAB (0x47e) sec=.text 
SerialWriteHex8 LAB (0x47a) sec=.text 
__SerialHexTable LAB (0x46a) sec=.text 
 Main .stopLoop LAB (0x42c) sec=.text 
SerialWriteHex16 LAB (0x4ba) sec=.text 
SerialWrite LAB (0x4de) sec=.text 
 Main .text LAB (0x434) REF sec=.text 
 Main .loop LAB (0x410) sec=.text 
SerialInit LAB (0x438) sec=.text 
IgnoreInterrupt LAB (0x40a) REF sec=.text 
FatalError LAB (0x400) REF sec=.text 
Main LAB (0x40c) REF sec=.text 
MFP_UDR EXPR(1073741847=0x40000017) EQU 
MFP_TSR EXPR(1073741846=0x40000016) EQU 
MFP_RSR EXPR(1073741845=0x40000015) UNUSED EQU 
MFP_UCR EXPR(1073741844=0x40000014) EQU 
MFP_SCR EXPR(1073741843=0x40000013) UNUSED EQU 
MFP_TDDR EXPR(1073741842=0x40000012) EQU 
MFP_TCDR EXPR(1073741841=0x40000011) UNUSED EQU 
MFP_TBDR EXPR(1073741840=0x40000010) UNUSED EQU 
MFP_TADR EXPR(1073741839=0x4000000f) UNUSED EQU 
MFP_TCDCR EXPR(1073741838=0x4000000e) EQU 
MFP_TBCR EXPR(1073741837=0x4000000d) UNUSED EQU 
MFP_TACR EXPR(1073741836=0x4000000c) UNUSED EQU 
MFP_VR EXPR(1073741835=0x4000000b) UNUSED EQU 
MFP_IMRB EXPR(1073741834=0x4000000a) UNUSED EQU 
MFP_IMRA EXPR(1073741833=0x40000009) UNUSED EQU 
MFP_ISRB EXPR(1073741832=0x40000008) UNUSED EQU 
MFP_ISRA EXPR(1073741831=0x40000007) UNUSED EQU 
MFP_IPRB EXPR(1073741830=0x40000006) UNUSED EQU 
MFP_IPRA EXPR(1073741829=0x40000005) UNUSED EQU 
MFP_IERB EXPR(1073741828=0x40000004) UNUSED EQU 
MFP_IERA EXPR(1073741827=0x40000003) UNUSED EQU 
MFP_DDR EXPR(1073741826=0x40000002) UNUSED EQU 
MFP_AER EXPR(1073741825=0x40000001) UNUSED EQU 
MFP_GPDR EXPR(1073741824=0x40000000) UNUSED EQU 
STACK_INIT EXPR(269484032=0x10100000) EQU 
IDE1_BASE EXPR(805306368=0x30000000) EQU 
IDE0_BASE EXPR(536870912=0x20000000) EQU 
MFP_BASE EXPR(1073741824=0x40000000) EQU 
RAM_PAGES EXPR(1024=0x400) UNUSED EQU 
RAM_TOP EXPR(269484032=0x10100000) EQU 
RAM_SIZE EXPR(1048576=0x100000) EQU 
RAM_BASE EXPR(268435456=0x10000000) EQU 
ROM_TOP EXPR(262144=0x40000) UNUSED EQU 
ROM_SIZE EXPR(262144=0x40000) EQU 
ROM_BASE EXPR(0=0x0) EQU 
_MOVEMBYTES EXPR(0=0x0) INTERNAL 
 MOVEMSIZE EXPR(0=0x0) INTERNAL 
_MOVEMREGS EXPR(0=0x0) INTERNAL 
__VASM EXPR(4=0x4) INTERNAL 
__UNIXFS EXPR(0=0x0) INTERNAL 

There have been no errors.
